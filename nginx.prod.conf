events {}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    resolver 127.0.0.11 valid=30s;

    # Upstream для CDN
    upstream cdn_server {
        server cdn.ewandr.com:443;
    }

    server {
        listen 80;
        server_name localhost;

        # Fallback для манифестов
        location @manifest_fallback {
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin *;

            # Возвращаем базовый манифест для development
            return 200 '{
                "client_products": "http://localhost:4201/remoteEntry.js"
            }';
        }

        # Остальные location блоки без изменений...
        location /api/ {
            set $backend "be-core-service:3000";
            proxy_pass http://$backend;
        }

        location = /.well-known/appspecific/com.chrome.devtools.json {
            return 204;                 # или root /usr/share/nginx/html;
        }

        # WebSocket для HMR
        location /sockjs-node/ {
            set $frontend "client-shell:4200";
            proxy_pass http://$frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Для Webpack 5 dev server
        location /ws {
            set $frontend "client-shell:4200";
            proxy_pass http://$frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
        }

        # Всё остальное проксируем на client-shell
        location / {
            set $frontend "client-shell:4200";
            proxy_pass http://$frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
}
