# .github/workflows/pr-detection.yml
name: PR Change Detection

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20'
  NX_NO_CLOUD: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps --loglevel verbose

      - name: Validate configuration files
        run: |
          echo "Checking for syntax errors in config files..."

          # Проверка playwright.config.ts файлов
          find . -name "playwright.config.ts" -type f | while read -r file; do
            echo "Validating $file"
            if ! npx tsc --noEmit --skipLibCheck "$file" 2>/dev/null; then
              echo "::warning::Syntax error in $file - skipping from NX analysis"
              mv "$file" "$file.backup"
              echo "export default {};" > "$file"
            fi
          done

          # Проверка webpack.config.ts файлов
          find . -name "webpack.config.ts" -type f | while read -r file; do
            echo "Validating $file"
            if ! npx tsc --noEmit --skipLibCheck "$file" 2>/dev/null; then
              echo "::warning::Syntax error in $file - skipping from NX analysis"
              mv "$file" "$file.backup"
              echo "export default {};" > "$file"
            fi
          done

      - name: Detect affected apps
        id: detect
        shell: bash
        run: |
          set -eo pipefail
          echo "Node: $(node -v) | npm: $(npm -v)"
          npx nx --version || true

          # 1) Находим BASE/HEAD
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_REF="main"
            git fetch --no-tags --prune --depth=1 origin "+refs/heads/${BASE_REF}:refs/remotes/origin/${BASE_REF}" \
              || git fetch --no-tags --prune --unshallow
            HEAD="${{ github.sha }}"
            BASE="$(git merge-base "$HEAD" "origin/${BASE_REF}")"
          else
            BASE="$(git rev-parse HEAD~1)"
            HEAD="$(git rev-parse HEAD)"
          fi

          echo "BASE=$BASE"
          echo "HEAD=$HEAD"

          # 2) Пробуем Nx (может упасть из-за graph)
          set +e
          AFFECTED_JSON="$(npx -y nx show projects --affected --base="$BASE" --head="$HEAD" --select=projects 2>/dev/null)"
          NX_RC=$?
          set -e

          # 3) Fallback на git diff, если Nx упал/вернул пусто
          if [[ $NX_RC -ne 0 || -z "$AFFECTED_JSON" ]]; then
            echo "Nx failed or returned empty. Falling back to git diff analysis..."
            CHANGED_FILES="$(git diff --name-only "$BASE" "$HEAD")"
            echo "$CHANGED_FILES"

            affected=()

            if echo "$CHANGED_FILES" | grep -q '^apps/clients/client-shell/'; then
              affected+=("client-shell")
            fi
            if echo "$CHANGED_FILES" | grep -q '^apps/clients/client_products/'; then
              affected+=("client_products")
            fi

            # простая эвристика по общим либам:
            if echo "$CHANGED_FILES" | grep -q '^libs/client-shell/'; then
              [[ " ${affected[*]} " =~ " client-shell " ]] || affected+=("client-shell")
            fi
            if echo "$CHANGED_FILES" | grep -q '^libs/'; then
              # если менялись любые либы — считаем, что затрагивает оба клиента (упростим)
              [[ " ${affected[*]} " =~ " client-shell " ]] || affected+=("client-shell")
              [[ " ${affected[*]} " =~ " client_products " ]] || affected+=("client_products")
            fi

            # JSON компактной строкой
            if [[ ${#affected[@]} -gt 0 ]]; then
              AFFECTED_JSON="$(printf '%s\n' "${affected[@]}" | jq -Rc 'split("\n") - [""]')"
            else
              AFFECTED_JSON='[]'
            fi
          fi

          echo "Affected (JSON): $AFFECTED_JSON"

          # 4) Доп. признаки (пример)
          HAS_SERVER_CHANGES=false
          if git diff --name-only "$BASE" "$HEAD" | grep -q '^be-'; then
            HAS_SERVER_CHANGES=true
          fi

          # 5) Правильная запись outputs (многострочно — безопаснее)
          {
            echo "affected_apps<<EOF"
            echo "$AFFECTED_JSON"
            echo "EOF"
            echo "has_server_changes=$HAS_SERVER_CHANGES"
          } >> "$GITHUB_OUTPUT"

      - name: Restore configuration files
        if: always()
        run: |
          echo "Restoring original configuration files..."

          # Восстанавливаем все .original файлы
          find . -name "*.original" -type f | while read -r original; do
            target="${original%.original}"
            echo "Restoring $target"
            mv "$original" "$target"
          done

          # Удаляем временные JS файлы
          find . -name "module-federation.config.js" -type f | while read -r jsfile; do
            if [ -f "${jsfile%.js}.ts" ]; then
              echo "Removing temporary $jsfile"
              rm "$jsfile"
            fi
          done

          find . -name "webpack.config.js" -type f | while read -r jsfile; do
            if [ -f "${jsfile%.js}.ts" ]; then
              echo "Removing temporary $jsfile"
              rm "$jsfile"
            fi
          done

          echo "✅ All original files restored"

      - name: Debug outputs
        run: |
          echo "=== DEBUG OUTPUTS ==="
          APPS_OUTPUT='${{ steps.affected.outputs.apps }}'
          REMOTES_OUTPUT='${{ steps.affected.outputs.remotes }}'
          echo "Apps output: '$APPS_OUTPUT'"
          echo "Remotes output: '$REMOTES_OUTPUT'"
          echo "Apps length: ${#APPS_OUTPUT}"
          echo "Remotes length: ${#REMOTES_OUTPUT}"
          echo "=== END DEBUG ==="

      - name: Check for server changes
        id: check-server
        run: |
          echo "Checking affected apps: ${{ steps.affected.outputs.apps }}"

          # Проверяем только server приложения
          if echo '${{ steps.affected.outputs.apps }}' | jq -e '.[] | select(. == "client-shell" or . == "be-vendure")' > /dev/null 2>&1; then
            echo "Server applications are affected"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "No server applications affected"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Check individual apps
        id: check-apps
        run: |
          # Проверяем каждое приложение отдельно
          if echo '${{ steps.affected.outputs.apps }}' | jq -e '.[] | select(. == "client-shell")' > /dev/null 2>&1; then
            echo "client_shell_affected=true" >> $GITHUB_OUTPUT
          else
            echo "client_shell_affected=false" >> $GITHUB_OUTPUT
          fi

          if echo '${{ steps.affected.outputs.apps }}' | jq -e '.[] | select(. == "be-vendure")' > /dev/null 2>&1; then
            echo "be_vendure_affected=true" >> $GITHUB_OUTPUT
          else
            echo "be_vendure_affected=false" >> $GITHUB_OUTPUT
          fi

      - name: Save detection results
        run: |
          # Получаем значения из предыдущих шагов
          APPS_JSON='${{ steps.affected.outputs.apps }}'
          REMOTES_JSON='${{ steps.affected.outputs.remotes }}'
          HAS_SERVER_CHANGES='${{ steps.check-server.outputs.has-changes }}'
          CLIENT_SHELL_AFFECTED='${{ steps.check-apps.outputs.client_shell_affected }}'
          BE_VENDURE_AFFECTED='${{ steps.check-apps.outputs.be_vendure_affected }}'

          # Проверяем и исправляем JSON если нужно
          if [[ -z "$APPS_JSON" ]] || [[ "$APPS_JSON" == "null" ]]; then
            APPS_JSON="[]"
          fi

          if [[ -z "$REMOTES_JSON" ]] || [[ "$REMOTES_JSON" == "null" ]]; then
            REMOTES_JSON="[]"
          fi

          # Сохраняем результаты в JSON файл
          cat > detection-results.json << EOF
          {
            "pr_number": "${{ github.event.pull_request.number }}",
            "pr_title": $(echo '${{ github.event.pull_request.title }}' | jq -R . || echo '"Unknown"'),
            "pr_url": "${{ github.event.pull_request.html_url }}",
            "base_sha": "${{ github.event.pull_request.base.sha }}",
            "head_sha": "${{ github.event.pull_request.head.sha }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "affected_apps": $APPS_JSON,
            "affected_remotes": $REMOTES_JSON,
            "has_server_changes": $HAS_SERVER_CHANGES,
            "client_shell_affected": $CLIENT_SHELL_AFFECTED,
            "be_vendure_affected": $BE_VENDURE_AFFECTED,
            "detection_method": "git_diff_fallback"
          }
          EOF

          echo "Detection results:"
          cat detection-results.json | jq '.' || cat detection-results.json

      - name: Upload detection results
        uses: actions/upload-artifact@v4
        with:
          name: detection-results-pr-${{ github.event.pull_request.number }}
          path: detection-results.json
          retention-days: 7

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('detection-results.json', 'utf8'));

            const affectedApps = results.affected_apps.length > 0
              ? results.affected_apps.map(app => `- ${app}`).join('\n')
              : 'No applications affected';

            const methodBadge = results.detection_method === 'git_diff_fallback'
              ? '⚠️ Fallback method used'
              : '✅ NX detection';

            const comment = `## 🔍 Change Detection Results

            ${methodBadge}

            **Affected Applications:**
            ${affectedApps}

            **Server Changes:** ${results.has_server_changes ? '✅ Yes' : '❌ No'}
            **Remote Apps:** ${results.affected_remotes.length} affected

            ---
            *This detection result has been saved and can be used for manual deployment.*
            *Artifact: \`detection-results-pr-${{ github.event.pull_request.number }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
