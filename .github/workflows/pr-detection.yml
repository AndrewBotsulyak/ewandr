# .github/workflows/pr-detection.yml
name: PR Change Detection

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20'
  NX_NO_CLOUD: true
  NX_PREFER_TS_NODE: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps --loglevel verbose

      - name: Validate configuration files
        run: |
          echo "Checking for syntax errors in config files..."

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ playwright.config.ts —Ñ–∞–π–ª–æ–≤
          find . -name "playwright.config.ts" -type f | while read -r file; do
            echo "Validating $file"
            if ! npx tsc --noEmit --skipLibCheck "$file" 2>/dev/null; then
              echo "::warning::Syntax error in $file - skipping from NX analysis"
              mv "$file" "$file.backup"
              echo "export default {};" > "$file"
            fi
          done

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ webpack.config.ts —Ñ–∞–π–ª–æ–≤
          find . -name "webpack.config.ts" -type f | while read -r file; do
            echo "Validating $file"
            if ! npx tsc --noEmit --skipLibCheck "$file" 2>/dev/null; then
              echo "::warning::Syntax error in $file - skipping from NX analysis"
              mv "$file" "$file.backup"
              echo "export default {};" > "$file"
            fi
          done

      - name: Detect affected apps
        id: detect
        shell: bash
        run: |
          set -eo pipefail
          echo "Node: $(node -v) | npm: $(npm -v)"
          npx nx --version || true

          # 1) –ù–∞—Ö–æ–¥–∏–º BASE/HEAD
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_REF="main"
            git fetch --no-tags --prune --depth=1 origin "+refs/heads/${BASE_REF}:refs/remotes/origin/${BASE_REF}" \
              || git fetch --no-tags --prune --unshallow
            HEAD="${{ github.sha }}"
            BASE="$(git merge-base "$HEAD" "origin/${BASE_REF}")"
          else
            BASE="$(git rev-parse HEAD~1)"
            HEAD="$(git rev-parse HEAD)"
          fi

          echo "BASE=$BASE"
          echo "HEAD=$HEAD"

          # 2) –ü—Ä–æ–±—É–µ–º Nx (–º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –∏–∑-–∑–∞ graph)
          echo "üöÄ Trying Nx affected detection..."
          set +e
          AFFECTED_JSON="$(npx -y nx show projects --affected --base="$BASE" --head="$HEAD" --select=projects 2>/dev/null)"
          NX_RC=$?
          set -e
          
          echo "üìä Nx return code: $NX_RC"
          echo "üìã Nx affected JSON: '$AFFECTED_JSON'"

          # 3) Fallback –Ω–∞ git diff, –µ—Å–ª–∏ Nx —É–ø–∞–ª/–≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ
          if [[ $NX_RC -ne 0 || -z "$AFFECTED_JSON" ]]; then
            echo "üîÑ Nx failed (RC=$NX_RC) or returned empty. Falling back to git diff analysis..."
            CHANGED_FILES="$(git diff --name-only "$BASE" "$HEAD")"
            echo "üìÅ Changed files:"
            echo "$CHANGED_FILES"
            echo "üìä Total changed files: $(echo "$CHANGED_FILES" | wc -l)"

            affected=()

            echo "üîç Checking for client-shell changes..."
            if echo "$CHANGED_FILES" | grep -q '^apps/clients/client-shell/'; then
              echo "‚úÖ Found client-shell app changes"
              affected+=("client-shell")
            else
              echo "‚ùå No client-shell app changes found"
            fi

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ client_* –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            echo "üîç Checking for client_* app changes..."
            for client_app in $(find apps/clients -maxdepth 1 -type d -name "client_*" -exec basename {} \;); do
              if echo "$CHANGED_FILES" | grep -q "^apps/clients/$client_app/"; then
                echo "‚úÖ Found $client_app app changes"
                affected+=("$client_app")
              else
                echo "‚ùå No $client_app app changes found"
              fi
            done

            # –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—â–∏–º –ª–∏–±–∞–º:
            echo "üîç Checking for client-shell lib changes..."
            if echo "$CHANGED_FILES" | grep -q '^libs/client-shell/'; then
              echo "‚úÖ Found client-shell lib changes"
              [[ " ${affected[*]} " =~ " client-shell " ]] || affected+=("client-shell")
            else
              echo "‚ùå No client-shell lib changes found"
            fi

            echo "üîç Checking for general lib changes..."
            if echo "$CHANGED_FILES" | grep -q '^libs/'; then
              echo "‚úÖ Found general lib changes - affecting all clients"
              # –µ—Å–ª–∏ –º–µ–Ω—è–ª–∏—Å—å –ª—é–±—ã–µ –ª–∏–±—ã ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
              [[ " ${affected[*]} " =~ " client-shell " ]] || affected+=("client-shell")
              
              # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ client_* –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–±—â–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
              for client_app in $(find apps/clients -maxdepth 1 -type d -name "client_*" -exec basename {} \;); do
                [[ " ${affected[*]} " =~ " $client_app " ]] || affected+=("$client_app")
              done
            else
              echo "‚ùå No general lib changes found"
            fi

            echo "üìã Affected apps array: ${affected[*]}"

            # JSON –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
            if [[ ${#affected[@]} -gt 0 ]]; then
              AFFECTED_JSON="$(printf '%s\n' "${affected[@]}" | jq -Rs 'split("\n") | map(select(length > 0))')"
            else
              AFFECTED_JSON='[]'
            fi
          else
            echo "‚úÖ Nx detection successful!"
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–≤–æ–¥ Nx –≤ JSON –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON
            if ! echo "$AFFECTED_JSON" | jq empty 2>/dev/null; then
              echo "üîÑ Converting Nx output to JSON array..."
              # Nx –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
              AFFECTED_JSON="$(echo "$AFFECTED_JSON" | tr ' ' '\n' | grep -v '^$' | jq -Rs 'split("\n") | map(select(length > 0))' 2>/dev/null || echo '[]')"
            fi
          fi

          echo "üìã Final Affected (JSON): $AFFECTED_JSON"

          # 4) –î–æ–ø. –ø—Ä–∏–∑–Ω–∞–∫–∏ (–ø—Ä–∏–º–µ—Ä)
          HAS_SERVER_CHANGES=false
          if git diff --name-only "$BASE" "$HEAD" | grep -q '^be-'; then
            HAS_SERVER_CHANGES=true
          fi

          # 5) –û–ø—Ä–µ–¥–µ–ª—è–µ–º remotes (–º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—ã) - –≤—Å–µ client_* –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          REMOTES_JSON='[]'
          REMOTES_ARRAY=()
          
          # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ client_* –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ affected apps
          for app in $(echo "$AFFECTED_JSON" | jq -r '.[]' 2>/dev/null); do
            if [[ "$app" =~ ^client_.* ]]; then
              REMOTES_ARRAY+=("$app")
            fi
          done
          
          # –°–æ–∑–¥–∞–µ–º JSON –º–∞—Å—Å–∏–≤ –∏–∑ remotes
          if [[ ${#REMOTES_ARRAY[@]} -gt 0 ]]; then
            REMOTES_JSON="$(printf '%s\n' "${REMOTES_ARRAY[@]}" | jq -Rs 'split("\n") | map(select(length > 0))')"
          fi

          # 6) –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å outputs (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)
          {
            echo "affected_apps<<EOF"
            echo "$AFFECTED_JSON"
            echo "EOF"
            echo "remotes<<EOF"
            echo "$REMOTES_JSON"
            echo "EOF"
            echo "has_server_changes=$HAS_SERVER_CHANGES"
          } >> "$GITHUB_OUTPUT"

      - name: Restore configuration files
        if: always()
        run: |
          echo "Restoring original configuration files..."

          # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ .original —Ñ–∞–π–ª—ã
          find . -name "*.original" -type f | while read -r original; do
            target="${original%.original}"
            echo "Restoring $target"
            mv "$original" "$target"
          done

          # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ JS —Ñ–∞–π–ª—ã
          find . -name "module-federation.config.js" -type f | while read -r jsfile; do
            if [ -f "${jsfile%.js}.ts" ]; then
              echo "Removing temporary $jsfile"
              rm "$jsfile"
            fi
          done

          find . -name "webpack.config.js" -type f | while read -r jsfile; do
            if [ -f "${jsfile%.js}.ts" ]; then
              echo "Removing temporary $jsfile"
              rm "$jsfile"
            fi
          done

          echo "‚úÖ All original files restored"

      - name: Debug outputs
        run: |
          echo "=== DEBUG OUTPUTS ==="
          APPS_OUTPUT='${{ steps.detect.outputs.affected_apps }}'
          REMOTES_OUTPUT='${{ steps.detect.outputs.remotes }}'
          echo "Apps output: '$APPS_OUTPUT'"
          echo "Remotes output: '$REMOTES_OUTPUT'"
          echo "Apps length: ${#APPS_OUTPUT}"
          echo "Remotes length: ${#REMOTES_OUTPUT}"
          echo "=== END DEBUG ==="

      - name: Check for server changes
        id: check-server
        run: |
          echo "Checking affected apps: ${{ steps.detect.outputs.affected_apps }}"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ server –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          if echo '${{ steps.detect.outputs.affected_apps }}' | jq -e '.[] | select(. == "client-shell" or . == "be-vendure")' > /dev/null 2>&1; then
            echo "Server applications are affected"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "No server applications affected"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Check individual apps
        id: check-apps
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
          if echo '${{ steps.detect.outputs.affected_apps }}' | jq -e '.[] | select(. == "client-shell")' > /dev/null 2>&1; then
            echo "client_shell_affected=true" >> $GITHUB_OUTPUT
          else
            echo "client_shell_affected=false" >> $GITHUB_OUTPUT
          fi

          if echo '${{ steps.detect.outputs.affected_apps }}' | jq -e '.[] | select(. == "be-vendure")' > /dev/null 2>&1; then
            echo "be_vendure_affected=true" >> $GITHUB_OUTPUT
          else
            echo "be_vendure_affected=false" >> $GITHUB_OUTPUT
          fi

      - name: Save detection results
        run: |
          # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
          APPS_JSON='${{ steps.detect.outputs.affected_apps }}'
          REMOTES_JSON='${{ steps.detect.outputs.remotes }}'
          HAS_SERVER_CHANGES='${{ steps.check-server.outputs.has-changes }}'
          CLIENT_SHELL_AFFECTED='${{ steps.check-apps.outputs.client_shell_affected }}'
          BE_VENDURE_AFFECTED='${{ steps.check-apps.outputs.be_vendure_affected }}'

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º JSON –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          if [[ -z "$APPS_JSON" ]] || [[ "$APPS_JSON" == "null" ]]; then
            APPS_JSON="[]"
          fi

          if [[ -z "$REMOTES_JSON" ]] || [[ "$REMOTES_JSON" == "null" ]]; then
            REMOTES_JSON="[]"
          fi

          # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç
          [[ "$HAS_SERVER_CHANGES" == "true" ]] && HAS_SERVER_CHANGES="true" || HAS_SERVER_CHANGES="false"
          [[ "$CLIENT_SHELL_AFFECTED" == "true" ]] && CLIENT_SHELL_AFFECTED="true" || CLIENT_SHELL_AFFECTED="false"
          [[ "$BE_VENDURE_AFFECTED" == "true" ]] && BE_VENDURE_AFFECTED="true" || BE_VENDURE_AFFECTED="false"

          # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º PR title
          PR_TITLE=$(echo '${{ github.event.pull_request.title }}' | jq -R . 2>/dev/null || echo '"Unknown"')

          # –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º JSON
          echo "=== DEBUG VARIABLES ==="
          echo "APPS_JSON: '$APPS_JSON'"
          echo "REMOTES_JSON: '$REMOTES_JSON'"
          echo "HAS_SERVER_CHANGES: '$HAS_SERVER_CHANGES'"
          echo "CLIENT_SHELL_AFFECTED: '$CLIENT_SHELL_AFFECTED'"
          echo "BE_VENDURE_AFFECTED: '$BE_VENDURE_AFFECTED'"
          echo "PR_TITLE: '$PR_TITLE'"
          echo "========================"

          # –í–∞–ª–∏–¥–∏—Ä—É–µ–º JSON –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
          if ! echo "$APPS_JSON" | jq empty 2>/dev/null; then
            echo "Invalid APPS_JSON, setting to []"
            APPS_JSON='[]'
          fi
          
          if ! echo "$REMOTES_JSON" | jq empty 2>/dev/null; then
            echo "Invalid REMOTES_JSON, setting to []"
            REMOTES_JSON='[]'
          fi
          
          if ! echo "$PR_TITLE" | jq empty 2>/dev/null; then
            echo "Invalid PR_TITLE, setting to default"
            PR_TITLE='"Unknown"'
          fi

          # –°–æ–∑–¥–∞–µ–º JSON —Å –ø–æ–º–æ—â—å—é jq –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
          jq -n \
            --arg pr_number "${{ github.event.pull_request.number }}" \
            --arg pr_title_raw "$PR_TITLE" \
            --arg pr_url "${{ github.event.pull_request.html_url }}" \
            --arg base_sha "${{ github.event.pull_request.base.sha }}" \
            --arg head_sha "${{ github.event.pull_request.head.sha }}" \
            --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --arg affected_apps_raw "$APPS_JSON" \
            --arg affected_remotes_raw "$REMOTES_JSON" \
            --arg has_server_changes "$HAS_SERVER_CHANGES" \
            --arg client_shell_affected "$CLIENT_SHELL_AFFECTED" \
            --arg be_vendure_affected "$BE_VENDURE_AFFECTED" \
            --arg detection_method "git_diff_fallback" \
            '{
              pr_number: ($pr_number | tonumber),
              pr_title: (try ($pr_title_raw | fromjson) catch "Unknown"),
              pr_url: $pr_url,
              base_sha: $base_sha,
              head_sha: $head_sha,
              timestamp: $timestamp,
              affected_apps: (try ($affected_apps_raw | fromjson) catch []),
              affected_remotes: (try ($affected_remotes_raw | fromjson) catch []),
              has_server_changes: ($has_server_changes == "true"),
              client_shell_affected: ($client_shell_affected == "true"),
              be_vendure_affected: ($be_vendure_affected == "true"),
              detection_method: $detection_method
            }' > detection-results.json

          echo "Detection results:"
          if jq empty detection-results.json 2>/dev/null; then
            echo "‚úÖ Valid JSON created"
            jq '.' detection-results.json
          else
            echo "‚ùå Invalid JSON created, showing raw content:"
            cat detection-results.json
            exit 1
          fi

      - name: Upload detection results
        run: |
          if [ ! -f "detection-results.json" ]; then
            echo "‚ùå detection-results.json not found!"
            ls -la
            exit 1
          fi
          
          echo "‚úÖ detection-results.json exists, size: $(wc -c < detection-results.json) bytes"
          echo "üìÑ File content preview:"
          head -20 detection-results.json
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: detection-results-pr-${{ github.event.pull_request.number }}
          path: detection-results.json
          retention-days: 7

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let results;
            
            try {
              const rawData = fs.readFileSync('detection-results.json', 'utf8');
              console.log('Raw JSON data:', rawData);
              results = JSON.parse(rawData);
            } catch (error) {
              console.error('JSON parsing error:', error);
              console.error('Raw file content:', fs.readFileSync('detection-results.json', 'utf8'));
              throw error;
            }

            const affectedApps = results.affected_apps.length > 0
              ? results.affected_apps.map(app => `- ${app}`).join('\n')
              : 'No applications affected';

            const methodBadge = results.detection_method === 'git_diff_fallback'
              ? '‚ö†Ô∏è Fallback method used'
              : '‚úÖ NX detection';

            const comment = `## üîç Change Detection Results

            ${methodBadge}

            **Affected Applications:**
            ${affectedApps}

            **Server Changes:** ${results.has_server_changes ? '‚úÖ Yes' : '‚ùå No'}
            **Remote Apps:** ${results.affected_remotes.length} affected

            ---
            *This detection result has been saved and can be used for manual deployment.*
            *Artifact: \`detection-results-pr-${{ github.event.pull_request.number }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
