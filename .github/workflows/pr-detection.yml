# .github/workflows/pr-detection.yml
name: PR Change Detection

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20'
  NX_NO_CLOUD: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps --loglevel verbose

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   # полный граф (или оставь, но см. защитный fetch ниже)

      - name: Detect affected apps (robust)
        id: affected
        shell: bash
        env:
          NX_NO_CLOUD: "true"
        run: |
          set -eo pipefail
          echo "Node: $(node -v) | npm: $(npm -v)"
          npx nx --version || true

          # Вычисляем BASE/HEAD для PR и push
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_REF="${{ github.base_ref }}"
            # Гарантируем наличие базовой ветки локально
            git fetch --no-tags --prune --depth=1 origin \
              "+refs/heads/${BASE_REF}:refs/remotes/origin/${BASE_REF}" \
              || git fetch --no-tags --prune --unshallow

            HEAD="${{ github.sha }}"  # текущий чекаут от actions/checkout
            BASE="$(git merge-base "$HEAD" "origin/${BASE_REF}")"
          else
            BASE="${{ github.event.before }}"
            HEAD="${{ github.sha }}"
          fi

          echo "Comparing $BASE ↔ $HEAD"
          echo "Base commit exists: $(git cat-file -t "$BASE" 2>/dev/null || echo 'no')"
          echo "Head commit exists: $(git cat-file -t "$HEAD" 2>/dev/null || echo 'no')"

          # Пробуем 3 варианта Nx, пока один не сработает
          try_cmd() {
            local CMD="$1"
            echo "Trying: $CMD"
            set +e
            OUT=$(bash -lc "$CMD" 2>nx_stderr.log)
            RC=$?
            set -e
            if [[ $RC -eq 0 && -n "$OUT" ]]; then
              echo "$OUT"
              return 0
            fi
            echo "::notice::Command failed (rc=$RC): $CMD"
            cat nx_stderr.log || true
            return 1
          }

          AFFECTED_JSON=""
          # 1) Современная команда (Nx 18+)
          if [[ -z "$AFFECTED_JSON" ]]; then
            OUT=$(try_cmd "npx nx show projects --affected --type=app --base=\"$BASE\" --head=\"$HEAD\" --json") || true
            if [[ "$OUT" =~ ^\[ ]]; then AFFECTED_JSON="$OUT"; fi
          fi
          # 2) print-affected (универсальный фоллбэк)
          if [[ -z "$AFFECTED_JSON" ]]; then
            OUT=$(try_cmd "npx nx print-affected --type=app --base=\"$BASE\" --head=\"$HEAD\" --select=projects") || true
            if [[ -n "$OUT" ]]; then
              # Превращаем список в JSON-массив
              AFFECTED_JSON=$(printf "%s\n" "$OUT" | jq -R -s 'split("\n") | map(select(length>0))')
            fi
          fi

          # Если вообще ничего не сработало — пустой список
          AFFECTED_JSON=${AFFECTED_JSON:-"[]"}
          echo "Affected apps JSON: $AFFECTED_JSON"

          # Фильтруем client_* как «ремоты»
          REMOTES_JSON=$(echo "$AFFECTED_JSON" | jq -c '[ .[] | select(startswith("client_")) ]')
          echo "Remotes JSON: $REMOTES_JSON"

          {
            echo "apps=$AFFECTED_JSON"
            echo "remotes=$REMOTES_JSON"
          } >> "$GITHUB_OUTPUT"

      - name: Check for server changes
        id: check-server
        run: |
          echo "Checking affected apps: ${{ steps.affected.outputs.apps }}"

          # Проверяем только server приложения
          if echo '${{ steps.affected.outputs.apps }}' | jq -e '.[] | select(. == "client-shell" or . == "be-vendure")' > /dev/null 2>&1; then
            echo "Server applications are affected"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "No server applications affected"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Check individual apps
        id: check-apps
        run: |
          # Проверяем каждое приложение отдельно
          if echo '${{ steps.affected.outputs.apps }}' | jq -e '.[] | select(. == "client-shell")' > /dev/null 2>&1; then
            echo "client_shell_affected=true" >> $GITHUB_OUTPUT
          else
            echo "client_shell_affected=false" >> $GITHUB_OUTPUT
          fi

          if echo '${{ steps.affected.outputs.apps }}' | jq -e '.[] | select(. == "be-vendure")' > /dev/null 2>&1; then
            echo "be_vendure_affected=true" >> $GITHUB_OUTPUT
          else
            echo "be_vendure_affected=false" >> $GITHUB_OUTPUT
          fi

      - name: Save detection results
        run: |
          # Сохраняем результаты в JSON файл
          cat > detection-results.json << EOF
          {
            "pr_number": "${{ github.event.pull_request.number }}",
            "pr_title": "${{ github.event.pull_request.title }}",
            "pr_url": "${{ github.event.pull_request.html_url }}",
            "base_sha": "${{ github.event.pull_request.base.sha }}",
            "head_sha": "${{ github.event.pull_request.head.sha }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "affected_apps": ${{ steps.affected.outputs.apps }},
            "affected_remotes": ${{ steps.affected.outputs.remotes }},
            "has_server_changes": ${{ steps.check-server.outputs.has-changes }},
            "client_shell_affected": ${{ steps.check-apps.outputs.client_shell_affected }},
            "be_vendure_affected": ${{ steps.check-apps.outputs.be_vendure_affected }}
          }
          EOF

          echo "Detection results:"
          cat detection-results.json | jq '.'

      - name: Upload detection results
        uses: actions/upload-artifact@v4
        with:
          name: detection-results-pr-${{ github.event.pull_request.number }}
          path: detection-results.json
          retention-days: 7

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('detection-results.json', 'utf8'));

            const affectedApps = results.affected_apps.length > 0
              ? results.affected_apps.map(app => `- ${app}`).join('\n')
              : 'No applications affected';

            const comment = `## 🔍 Change Detection Results

            **Affected Applications:**
            ${affectedApps}

            **Server Changes:** ${results.has_server_changes ? '✅ Yes' : '❌ No'}
            **Remote Apps:** ${results.affected_remotes.length} affected

            ---
            *This detection result has been saved and can be used for manual deployment.*
            *Artifact: \`detection-results-pr-${{ github.event.pull_request.number }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
