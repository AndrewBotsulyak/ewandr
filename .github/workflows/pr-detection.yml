# .github/workflows/pr-detection.yml
name: PR Change Detection

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20'
  NX_NO_CLOUD: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps --loglevel verbose

      - name: Build core libraries
        run: |
          echo "Building core libraries for proper path resolution..."
          npx nx build core --skip-nx-cache || echo "::warning::Failed to build core library"

      - name: Validate configuration files
        run: |
          echo "Checking for syntax errors in config files..."

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ playwright.config.ts —Ñ–∞–π–ª–æ–≤
          find . -name "playwright.config.ts" -type f | while read -r file; do
            echo "Validating $file"
            if ! npx tsc --noEmit --skipLibCheck "$file" 2>/dev/null; then
              echo "::warning::Syntax error in $file - skipping from NX analysis"
              mv "$file" "$file.backup"
              echo "export default {};" > "$file"
            fi
          done

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ webpack.config.ts —Ñ–∞–π–ª–æ–≤
          find . -name "webpack.config.ts" -type f | while read -r file; do
            echo "Validating $file"
            if ! npx tsc --noEmit --skipLibCheck "$file" 2>/dev/null; then
              echo "::warning::Syntax error in $file - skipping from NX analysis"
              mv "$file" "$file.backup"
              echo "export default {};" > "$file"
            fi
          done

      - name: Detect affected apps
        id: affected
        env:
          NX_DAEMON: "false"
          NX_VERBOSE_LOGGING: "true"
        shell: bash
        run: |
          set -Eeuo pipefail
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          BASE_REF="${{ github.event.pull_request.base.ref }}"
          echo "PR mode. Comparing $BASE_SHA ($BASE_REF) ‚Üí $HEAD_SHA"

          # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Ç–æ–∫
          git fetch --no-tags --prune --depth=10 origin "${BASE_REF}:${BASE_REF}" || echo "::warning::Failed to fetch base ref"
          git fetch --no-tags --prune --depth=10 origin "${BASE_SHA}" || echo "::warning::Failed to fetch base SHA"
          git fetch --no-tags --prune --depth=10 origin "${HEAD_SHA}" || echo "::warning::Failed to fetch head SHA"

          # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
          set +e

          # –ú–µ—Ç–æ–¥ 1: NX affected
          OUT=$(npx --no-install nx show projects \
            --affected --type app \
            --base="$BASE_SHA" --head="$HEAD_SHA" \
            --json 2>&1)
          NX_CODE=$?

          if [[ $NX_CODE -eq 0 ]]; then
            echo "‚úÖ NX affected detection successful"
            echo "apps=$OUT" >> "$GITHUB_OUTPUT"
            REMOTES_JSON=$(jq -c '[ .[] | select(startswith("client_")) ]' <<< "$OUT")
            echo "remotes=$REMOTES_JSON" >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå NX affected detection failed (code=$NX_CODE)"
            echo "nx output: $OUT"

            # –ú–µ—Ç–æ–¥ 2: –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            echo "üîÑ Falling back to git diff analysis..."

            CHANGED_FILES=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" || echo "")
            echo "Changed files: $CHANGED_FILES"

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø–æ –ø—É—Ç—è–º —Ñ–∞–π–ª–æ–≤
            AFFECTED_APPS="[]"

            if echo "$CHANGED_FILES" | grep -q "apps/clients/client-shell"; then
              AFFECTED_APPS=$(echo "$AFFECTED_APPS" | jq '. + ["client-shell"]')
            fi

            if echo "$CHANGED_FILES" | grep -q "apps/be-vendure"; then
              AFFECTED_APPS=$(echo "$AFFECTED_APPS" | jq '. + ["be-vendure"]')
            fi

            if echo "$CHANGED_FILES" | grep -q "apps/clients/client_products"; then
              AFFECTED_APPS=$(echo "$AFFECTED_APPS" | jq '. + ["client_products"]')
            fi

            # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

            echo "apps=$AFFECTED_APPS" >> "$GITHUB_OUTPUT"
            REMOTES_JSON=$(jq -c '[ .[] | select(startswith("client_")) ]' <<< "$AFFECTED_APPS")
            echo "remotes=$REMOTES_JSON" >> "$GITHUB_OUTPUT"

            echo "üìã Fallback detection completed"
            echo "Affected apps: $AFFECTED_APPS"
          fi

          set -e

      - name: Restore configuration files
        if: always()
        run: |
          # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
          find . -name "*.original" -type f | while read -r original; do
            target="${original%.original}"
            echo "Restoring $target"
            mv "$original" "$target"
          done

          # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ JS —Ñ–∞–π–ª—ã
          find . -name "module-federation.config.js" -type f | while read -r jsfile; do
            if [ -f "${jsfile%.js}.ts.original" ]; then
              rm "$jsfile"
            fi
          done

          find . -name "webpack.config.js" -type f | while read -r jsfile; do
            if [ -f "${jsfile%.js}.ts.original" ]; then
              rm "$jsfile"
            fi
          done

      - name: Check for server changes
        id: check-server
        run: |
          echo "Checking affected apps: ${{ steps.affected.outputs.apps }}"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ server –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          if echo '${{ steps.affected.outputs.apps }}' | jq -e '.[] | select(. == "client-shell" or . == "be-vendure")' > /dev/null 2>&1; then
            echo "Server applications are affected"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "No server applications affected"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Check individual apps
        id: check-apps
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
          if echo '${{ steps.affected.outputs.apps }}' | jq -e '.[] | select(. == "client-shell")' > /dev/null 2>&1; then
            echo "client_shell_affected=true" >> $GITHUB_OUTPUT
          else
            echo "client_shell_affected=false" >> $GITHUB_OUTPUT
          fi

          if echo '${{ steps.affected.outputs.apps }}' | jq -e '.[] | select(. == "be-vendure")' > /dev/null 2>&1; then
            echo "be_vendure_affected=true" >> $GITHUB_OUTPUT
          else
            echo "be_vendure_affected=false" >> $GITHUB_OUTPUT
          fi

      - name: Save detection results
        run: |
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
          cat > detection-results.json << EOF
          {
            "pr_number": "${{ github.event.pull_request.number }}",
            "pr_title": $(echo '${{ github.event.pull_request.title }}' | jq -R .),
            "pr_url": "${{ github.event.pull_request.html_url }}",
            "base_sha": "${{ github.event.pull_request.base.sha }}",
            "head_sha": "${{ github.event.pull_request.head.sha }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "affected_apps": ${{ steps.affected.outputs.apps }},
            "affected_remotes": ${{ steps.affected.outputs.remotes }},
            "has_server_changes": ${{ steps.check-server.outputs.has-changes }},
            "client_shell_affected": ${{ steps.check-apps.outputs.client_shell_affected }},
            "be_vendure_affected": ${{ steps.check-apps.outputs.be_vendure_affected }},
            "detection_method": "git_diff_fallback"
          }
          EOF

          echo "Detection results:"
          cat detection-results.json | jq '.'

      - name: Upload detection results
        uses: actions/upload-artifact@v4
        with:
          name: detection-results-pr-${{ github.event.pull_request.number }}
          path: detection-results.json
          retention-days: 7

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('detection-results.json', 'utf8'));

            const affectedApps = results.affected_apps.length > 0
              ? results.affected_apps.map(app => `- ${app}`).join('\n')
              : 'No applications affected';

            const methodBadge = results.detection_method === 'git_diff_fallback'
              ? '‚ö†Ô∏è Fallback method used'
              : '‚úÖ NX detection';

            const comment = `## üîç Change Detection Results

            ${methodBadge}

            **Affected Applications:**
            ${affectedApps}

            **Server Changes:** ${results.has_server_changes ? '‚úÖ Yes' : '‚ùå No'}
            **Remote Apps:** ${results.affected_remotes.length} affected

            ---
            *This detection result has been saved and can be used for manual deployment.*
            *Artifact: \`detection-results-pr-${{ github.event.pull_request.number }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
