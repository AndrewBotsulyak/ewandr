# .github/workflows/manual-deployment.yml
name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to deploy (required)'
        required: true
        type: string
      deploy_remotes:
        description: 'Deploy remote applications'
        required: true
        default: true
        type: boolean
      deploy_server:
        description: 'Deploy server applications'
        required: true
        default: true
        type: boolean

permissions:
  contents: read
  actions: read
  pull-requests: read

env:
  NODE_VERSION: '20'
  NX_NO_CLOUD: true
  MF_MANIFEST_PATH: 'client-shell'
  MF_MANIFEST_FILE_NAME: 'mf-manifest.prod.json'
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY_PREFIX: ${{ secrets.ECR_REPOSITORY_PREFIX }}
  CDN_BUCKET: ${{ secrets.CDN_BUCKET }}
  CDN_DISTRIBUTION_ID: ${{ secrets.CDN_DISTRIBUTION_ID }}

jobs:
  load-detection-results:
    runs-on: ubuntu-latest
    outputs:
      affected-apps: ${{ steps.load.outputs.affected_apps }}
      has-server-changes: ${{ steps.load.outputs.has_server_changes }}
      affected-remotes: ${{ steps.load.outputs.affected_remotes }}
      client_shell_affected: ${{ steps.load.outputs.client_shell_affected }}
      be_core_service_affected: ${{ steps.load.outputs.be_core_service_affected }}
    steps:
      # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GitHub API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
      - name: Download artifact via API
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Searching for artifact from PR #${{ github.event.inputs.pr_number }}..."

          # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
          ARTIFACTS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/artifacts \
            --jq '.artifacts[] | select(.name == "detection-results-pr-${{ github.event.inputs.pr_number }}") | {id, name, expired, created_at}')

          if [ -z "$ARTIFACTS" ]; then
            echo "‚ùå No artifact found for PR #${{ github.event.inputs.pr_number }}"
            echo "Please ensure the PR detection workflow has completed successfully."
            exit 1
          fi

          echo "Found artifact:"
          echo "$ARTIFACTS"

          # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
          ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.id' | head -n1)

          # –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
          echo "Downloading artifact ID: $ARTIFACT_ID"
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip \
            > artifact.zip

          # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
          unzip artifact.zip
          ls -la

      - name: Load and display detection results
        id: load
        run: |
          if [ -f detection-results.json ]; then
            echo "üìã Deployment Summary for PR #${{ github.event.inputs.pr_number }}:"
            echo "================================"
            cat detection-results.json | jq -r '
              "PR Title: \(.pr_title)",
              "PR URL: \(.pr_url)",
              "Detection Time: \(.timestamp)",
              "",
              "Affected Applications:",
              (.affected_apps | map("  - " + .) | join("\n")),
              "",
              "Remote Applications: \(.affected_remotes | length)",
              "Server Changes: \(.has_server_changes)"
            '
            echo "================================"

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ outputs
            echo "affected_apps=$(jq -c '.affected_apps' detection-results.json)" >> $GITHUB_OUTPUT
            echo "affected_remotes=$(jq -c '.affected_remotes' detection-results.json)" >> $GITHUB_OUTPUT
            echo "has_server_changes=$(jq -r '.has_server_changes' detection-results.json)" >> $GITHUB_OUTPUT
            echo "client_shell_affected=$(jq -r '.client_shell_affected' detection-results.json)" >> $GITHUB_OUTPUT
            echo "be_core_service_affected=$(jq -r '.be_core_service_affected' detection-results.json)" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No detection results found in artifact!"
            exit 1
          fi

  # –û—Å—Ç–∞–ª—å–Ω—ã–µ jobs –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
