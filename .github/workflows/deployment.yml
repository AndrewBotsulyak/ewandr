# .github/workflows/manual-deployment.yml
name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to deploy (required)'
        required: true
        type: string
      deploy_remotes:
        description: 'Deploy remote applications'
        required: true
        default: true
        type: boolean
      deploy_server:
        description: 'Deploy server applications'
        required: true
        default: true
        type: boolean

permissions:
  contents: read
  actions: read
  pull-requests: read

env:
  NODE_VERSION: '20'
  NX_NO_CLOUD: true
  NX_PREFER_TS_NODE: true
  MF_MANIFEST_PATH: 'client-shell'
  MF_MANIFEST_FILE_NAME: 'mf-manifest.prod.json'
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY_PREFIX: ${{ secrets.ECR_REPOSITORY_PREFIX }}
  CDN_BUCKET: ${{ secrets.CDN_BUCKET }}
  CDN_DISTRIBUTION_ID: ${{ secrets.CDN_DISTRIBUTION_ID }}

jobs:
  load-detection-results:
    runs-on: ubuntu-latest
    outputs:
      affected-apps: ${{ steps.load.outputs.affected_apps }}
      has-server-changes: ${{ steps.load.outputs.has_server_changes }}
      affected-remotes: ${{ steps.load.outputs.affected_remotes }}
      client_shell_affected: ${{ steps.load.outputs.client_shell_affected }}
      be_vendure_affected: ${{ steps.load.outputs.be_vendure_affected }}
    steps:
      - name: Download artifact via API
        timeout-minutes: 5
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Searching for artifact: detection-results-pr-${{ github.event.inputs.pr_number }}"

          # Check that PR detection workflow ran for this PR
          echo "🔍 Checking PR detection workflow runs for PR #${{ github.event.inputs.pr_number }}:"
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/runs \
            --jq '.workflow_runs[] | select(.name == "PR Change Detection") | {id, status, conclusion, created_at, head_sha}' | head -5

          # Debug: show all artifacts
          echo "🔍 All artifacts in repository:"
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/artifacts \
            --jq '.artifacts[] | {name, expired, created_at}' | head -20

          # Get artifact list
          ARTIFACTS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/artifacts \
            --jq '.artifacts[] | select(.name == "detection-results-pr-${{ github.event.inputs.pr_number }}") | {id, name, expired, created_at}')

          if [ -z "$ARTIFACTS" ]; then
            echo "❌ No artifact found with name: detection-results-pr-${{ github.event.inputs.pr_number }}"
            echo "Please ensure the PR detection workflow has completed successfully."
            exit 1
          fi

          echo "Found artifact:"
          echo "$ARTIFACTS"

          # Get latest artifact ID
          ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.id' | head -n1)

          # Download artifact
          echo "Downloading artifact ID: $ARTIFACT_ID"
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip \
            > artifact.zip

          # Extract
          unzip artifact.zip
          ls -la

      - name: Load and display detection results
        id: load
        run: |
          if [ -f detection-results.json ]; then
            echo "📋 Deployment Summary for PR #${{ github.event.inputs.pr_number }}:"
            echo "================================"
            cat detection-results.json | jq -r '
              "PR Title: \(.pr_title)",
              "PR URL: \(.pr_url)",
              "Detection Time: \(.timestamp)",
              "",
              "Affected Applications:",
              (.affected_apps | map("  - " + .) | join("\n")),
              "",
              "Remote Applications: \(.affected_remotes | length)",
              "Server Changes: \(.has_server_changes)"
            '
            echo "================================"

            # Load all outputs
            echo "affected_apps=$(jq -c '.affected_apps' detection-results.json)" >> $GITHUB_OUTPUT
            echo "affected_remotes=$(jq -c '.affected_remotes' detection-results.json)" >> $GITHUB_OUTPUT
            echo "has_server_changes=$(jq -r '.has_server_changes' detection-results.json)" >> $GITHUB_OUTPUT
            echo "client_shell_affected=$(jq -r '.client_shell_affected' detection-results.json)" >> $GITHUB_OUTPUT
            echo "be_vendure_affected=$(jq -r '.be_vendure_affected' detection-results.json)" >> $GITHUB_OUTPUT
          else
            echo "❌ No detection results found in artifact!"
            exit 1
          fi

  build-and-deploy-remotes:
    needs: load-detection-results
    if: github.event.inputs.deploy_remotes == 'true' && needs.load-detection-results.outputs.affected-remotes != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.load-detection-results.outputs.affected-remotes) }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build in Docker
        env:
          NX_PREFER_TS_NODE: true
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e NX_PREFER_TS_NODE=true \
            node:20-alpine \
            sh -c "npm ci --legacy-peer-deps && npx nx run ${{ matrix.app }}:server:production"

      - name: Generate version
        id: version
        run: |
          VERSION="${{ github.sha }}-$(date +%Y%m%d%H%M%S)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Upload to S3 CDN
        run: |
          APP_NAME="${{ matrix.app }}"
          VERSION="${{ steps.version.outputs.version }}"
          BUILD_PATH="dist/apps/clients/$APP_NAME"

          # Upload versioned build
          aws s3 sync $BUILD_PATH $CDN_BUCKET/$APP_NAME/$VERSION/ \
            --delete \
            --cache-control "public, max-age=31536000"

          # Upload as latest
          aws s3 sync $BUILD_PATH $CDN_BUCKET/$APP_NAME/latest/ \
            --delete \
            --cache-control "public, max-age=300"

      - name: Update manifest
        run: |
          APP_NAME="${{ matrix.app }}"
          VERSION="${{ steps.version.outputs.version }}"

          # Download current manifest
          aws s3 cp $CDN_BUCKET/$MF_MANIFEST_PATH/$MF_MANIFEST_FILE_NAME ./$MF_MANIFEST_FILE_NAME || echo '{}' > ./$MF_MANIFEST_FILE_NAME

          # Update manifest with new version
          jq --arg app "$APP_NAME" \
             --arg server "https://cdn.ewandr.com/$APP_NAME/$VERSION/server/remoteEntry.js" \
             --arg browser "https://cdn.ewandr.com/$APP_NAME/$VERSION/browser/mf-manifest.json" \
             '.[$app] = {server: $server, browser: $browser}' \
             ./$MF_MANIFEST_FILE_NAME > ./mf-manifest-updated.json

          # Upload updated manifest
          aws s3 cp ./mf-manifest-updated.json $CDN_BUCKET/$MF_MANIFEST_PATH/$MF_MANIFEST_FILE_NAME \
            --cache-control "public, max-age=60"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CDN_DISTRIBUTION_ID \
            --paths "/$MF_MANIFEST_PATH/$MF_MANIFEST_FILE_NAME" "/${{ matrix.app }}/latest/*"

  build-and-push-server:
    needs: load-detection-results
    if: github.event.inputs.deploy_server == 'true' && needs.load-detection-results.outputs.has-server-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [ 'client-shell', 'be-vendure' ]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Check if app was affected
        id: check-affected
        run: |
          if echo '${{ needs.load-detection-results.outputs.affected-apps }}' | jq -r '.[]' | grep -q "^${{ matrix.app }}$"; then
            echo "affected=true" >> $GITHUB_OUTPUT
          else
            echo "affected=false" >> $GITHUB_OUTPUT
          fi

      - name: Build be-vendure application
        if: matrix.app == 'be-vendure' && needs.load-detection-results.outputs.be_vendure_affected == 'true'
        env:
          NX_PREFER_TS_NODE: true
        run: |
          echo ">>> Running NX build for be-vendure…"
          npx nx run be-vendure:build:production

          echo ">>> Listing all dist/apps directories:"
          ls -R dist/apps

          echo ">>> Contents of the be-vendure build folder:"
          ls -l dist/apps/backends/be-vendure || echo "Folder not found: dist/apps/backends/be-vendure"

      - name: Build client-shell application
        if: matrix.app == 'client-shell' && needs.load-detection-results.outputs.client_shell_affected == 'true'
        env:
          NX_PREFER_TS_NODE: true
        run: npx nx run client-shell:build:production --excludeTaskDependencies && npx nx run client-shell:server:production --excludeTaskDependencies

      - name: Configure AWS credentials
        if: steps.check-affected.outputs.affected == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: steps.check-affected.outputs.affected == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image with unique tag
        if: steps.check-affected.outputs.affected == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # Unique tag with PR number and timestamp
          IMAGE_TAG: pr-${{ github.event.inputs.pr_number }}-${{ github.run_number }}-${{ github.sha }}
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}
          ECR_REPOSITORY_PREFIX: ${{ env.ECR_REPOSITORY_PREFIX }}
        run: |
          echo "Building with unique tag: $IMAGE_TAG"
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "AWS_ACCOUNT_ID: $AWS_ACCOUNT_ID"
          echo "AWS_REGION: $AWS_REGION"

          # IMPORTANT: Export IMAGE_TAG so script can see it
          export IMAGE_TAG=$IMAGE_TAG

          # Run build script
          SCRIPT_NAME="CI_CD/ecr-${{ matrix.app }}.sh"
          if [ -f "./$SCRIPT_NAME" ]; then
            echo "Running $SCRIPT_NAME"
            chmod +x ./$SCRIPT_NAME
            ./$SCRIPT_NAME
          else
            echo "Script $SCRIPT_NAME not found!"
            exit 1
          fi

          # Verify image was created in ECR
          echo "🔍 Verifying image in ECR..."
          if aws ecr describe-images \
            --repository-name "ewandr/${{ matrix.app }}" \
            --image-ids imageTag=$IMAGE_TAG \
            --region $AWS_REGION 2>/dev/null; then
            echo "✅ Image successfully pushed to ECR!"
          else
            echo "❌ ERROR: Image not found in ECR after push!"
            exit 1
          fi

      - name: Clean up old ECR images
        if: steps.check-affected.outputs.affected == 'true'
        env:
          REPO_NAME: ewandr/${{ matrix.app }}
        run: |
          echo "🧹 Cleaning up old ECR images for $REPO_NAME..."

          # List of images, sorted from oldest to newest
          IMAGES=$(aws ecr describe-images \
            --repository-name "$REPO_NAME" \
            --query 'sort_by(imageDetails,&imagePushedAt)[*].[imageDigest, imageTags[0], imagePushedAt]' \
            --output text)

          IMAGE_COUNT=$(echo "$IMAGES" | wc -l)
          echo "Found $IMAGE_COUNT images"

          if [ "$IMAGE_COUNT" -gt 5 ]; then
            # Calculate how many to delete to keep exactly 5
            DELETE_COUNT=$((IMAGE_COUNT - 5))
            echo "Will delete $DELETE_COUNT old images"

            # Take first DELETE_COUNT lines - these are the oldest images
            IMAGES_TO_DELETE=$(echo "$IMAGES" | head -n "$DELETE_COUNT")

            echo "$IMAGES_TO_DELETE" | while read -r digest tag pushed_at; do
              [ -n "$digest" ] || continue
              echo "Deleting image with digest: $digest (tag: $tag, pushed: $pushed_at)"
              aws ecr batch-delete-image \
                --repository-name "$REPO_NAME" \
                --image-ids imageDigest="$digest" || true
            done
          else
            echo "No cleanup needed, only $IMAGE_COUNT images exist"
          fi

  update-server-configuration:
    needs: [ load-detection-results, build-and-push-server ]
    if: |
      github.event.inputs.deploy_server == 'true' &&
      needs.build-and-push-server.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/lightsail_key
          chmod 600 ~/.ssh/lightsail_key
          ssh-keyscan -H ${{ secrets.LIGHTSAIL_HOST }} >> ~/.ssh/known_hosts

      - name: Update .env.production with unique tags
        env:
          SSH_KEY: ~/.ssh/lightsail_key
          REMOTE_USER: ${{ secrets.LIGHTSAIL_USER }}
          REMOTE_HOST: ${{ secrets.LIGHTSAIL_HOST }}
        run: |
          set -eo pipefail
          echo "📝 Updating server configuration with unique image tags…"

          # 1) Download old .env.production
          ssh -i "$SSH_KEY" "$REMOTE_USER@$REMOTE_HOST" \
            "cat ~/ewandr/.env.production" > old_env_prod 2>/dev/null || true

          # 2) Generate new tag - SAME AS IN build-and-push-server
          UNIQUE_TAG="pr-${{ github.event.inputs.pr_number }}-${{ github.run_number }}-${{ github.sha }}"

          # 3) Update .env.production, preserving existing entries
          if [ -s old_env_prod ]; then
            echo "📋 Existing .env.production found, updating affected service tags"
            
            # Create temp file with updated values
            cp old_env_prod .env.production
            
            # Update CLIENT_SHELL_TAG if service was affected
            if [ "${{ needs.load-detection-results.outputs.client_shell_affected }}" = "true" ]; then
              if grep -q "^CLIENT_SHELL_TAG=" .env.production; then
                sed -i "s/^CLIENT_SHELL_TAG=.*/CLIENT_SHELL_TAG=$UNIQUE_TAG/" .env.production
                echo "✅ Updated existing CLIENT_SHELL_TAG to $UNIQUE_TAG"
              else
                echo "CLIENT_SHELL_TAG=$UNIQUE_TAG" >> .env.production
                echo "✅ Added CLIENT_SHELL_TAG=$UNIQUE_TAG"
              fi
            else
              echo "⏭️ CLIENT_SHELL_TAG not affected, keeping existing value"
            fi
            
            # Update BE_VENDURE_TAG if service was affected
            if [ "${{ needs.load-detection-results.outputs.be_vendure_affected }}" = "true" ]; then
              if grep -q "^BE_VENDURE_TAG=" .env.production; then
                sed -i "s/^BE_VENDURE_TAG=.*/BE_VENDURE_TAG=$UNIQUE_TAG/" .env.production
                echo "✅ Updated existing BE_VENDURE_TAG to $UNIQUE_TAG"
              else
                echo "BE_VENDURE_TAG=$UNIQUE_TAG" >> .env.production
                echo "✅ Added BE_VENDURE_TAG=$UNIQUE_TAG"
              fi
            else
              echo "⏭️ BE_VENDURE_TAG not affected, keeping existing value"
            fi
            
            # Update or add ECR_REPOSITORY_PREFIX
            if grep -q "^ECR_REPOSITORY_PREFIX=" .env.production; then
              sed -i "s/^ECR_REPOSITORY_PREFIX=.*/ECR_REPOSITORY_PREFIX=${{ env.ECR_REPOSITORY_PREFIX }}/" .env.production
              echo "✅ Updated existing ECR_REPOSITORY_PREFIX to ${{ env.ECR_REPOSITORY_PREFIX }}"
            else
              echo "ECR_REPOSITORY_PREFIX=${{ env.ECR_REPOSITORY_PREFIX }}" >> .env.production
              echo "✅ Added ECR_REPOSITORY_PREFIX=${{ env.ECR_REPOSITORY_PREFIX }}"
            fi
            
            # Update or add ECR_REGISTRY
            if grep -q "^ECR_REGISTRY=" .env.production; then
              sed -i "s/^ECR_REGISTRY=.*/ECR_REGISTRY=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/" .env.production
              echo "✅ Updated existing ECR_REGISTRY"
            else
              echo "ECR_REGISTRY=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> .env.production
              echo "✅ Added ECR_REGISTRY"
            fi
          else
            echo "📋 No existing .env.production found, creating new one"
            cat > .env.production <<EOF
          # Auto-generated by GitHub Actions
          # PR: #${{ github.event.inputs.pr_number }}
          # Run: #${{ github.run_number }}
          # Generated: $(date -u +%Y-%m-%dT%H:%M:%SZ)

          ECR_REGISTRY=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY_PREFIX=${{ env.ECR_REPOSITORY_PREFIX }}
          EOF
            
            # Add tags only for affected services
            if [ "${{ needs.load-detection-results.outputs.client_shell_affected }}" = "true" ]; then
              echo "CLIENT_SHELL_TAG=$UNIQUE_TAG" >> .env.production
              echo "✅ Added CLIENT_SHELL_TAG=$UNIQUE_TAG"
            fi
            
            if [ "${{ needs.load-detection-results.outputs.be_vendure_affected }}" = "true" ]; then
              echo "BE_VENDURE_TAG=$UNIQUE_TAG" >> .env.production
              echo "✅ Added BE_VENDURE_TAG=$UNIQUE_TAG"
            fi
          fi

          # 4) Show what changed
          echo ""
          echo "📋 Updated .env.production content:"
          cat .env.production
          echo ""

          # 5) Copy and atomically update config on server
          scp -i "$SSH_KEY" .env.production "$REMOTE_USER@$REMOTE_HOST:~/ewandr/.env.production.new"
          ssh -i "$SSH_KEY" "$REMOTE_USER@$REMOTE_HOST" <<'ENDSSH'
          set -eo pipefail
          cd ~/ewandr

          # Create env-backups directory if it doesn't exist
          mkdir -p env-backups

          # Create new backup in env-backups directory
          cp .env.production env-backups/.env.production.backup-$(date +%Y-%m-%d_%H:%M:%S) || true

          # Clean up old backups, keep only 5 most recent
          BACKUP_COUNT=$(ls -1 env-backups/.env.production.backup-* 2>/dev/null | wc -l)
          if [ "$BACKUP_COUNT" -gt 5 ]; then
            echo "🧹 Cleaning up old backups, keeping 5 most recent..."
            ls -1t env-backups/.env.production.backup-* | tail -n +6 | xargs rm -f
            echo "✅ Removed $((BACKUP_COUNT - 5)) old backup(s)"
          fi

          # Update current .env.production
          mv .env.production.new .env.production
          echo "✅ .env.production successfully updated"
          cat .env.production
          ENDSSH
      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/lightsail_key ./.env.production


  pull-latest-images:
    needs: [ load-detection-results, build-and-push-server, update-server-configuration ]
    if: |
      github.event.inputs.deploy_server == 'true' &&
      needs.build-and-push-server.result == 'success' &&
      needs.update-server-configuration.result == 'success' &&
      (needs.load-detection-results.outputs.client_shell_affected == 'true' ||
       needs.load-detection-results.outputs.be_vendure_affected == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/lightsail_key
          chmod 600 ~/.ssh/lightsail_key
          ssh-keyscan -H ${{ secrets.LIGHTSAIL_HOST }} >> ~/.ssh/known_hosts

      - name: Pull latest images on server
        run: |
          echo "🔄 Pulling latest images on Lightsail server..."

          # SSH connection and command execution
          ssh -i ~/.ssh/lightsail_key \
            -o StrictHostKeyChecking=no \
            ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }} << 'ENDSSH'
            set -e
            cd ~/ewandr

            echo "📋 Current .env.production:"
            cat .env.production

            echo "🔐 Logging in to AWS ECR..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
              docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

            SERVICES_TO_PULL=""

            # Determine which services need updating
            if [[ "${{ needs.load-detection-results.outputs.client_shell_affected }}" == "true" ]]; then
              SERVICES_TO_PULL="client-shell"
              echo "📦 Will pull client-shell image"
            fi

            if [[ "${{ needs.load-detection-results.outputs.be_vendure_affected }}" == "true" ]]; then
              if [[ -n "$SERVICES_TO_PULL" ]]; then
                SERVICES_TO_PULL="$SERVICES_TO_PULL be-vendure"
              else
                SERVICES_TO_PULL="be-vendure"
              fi
              echo "📦 Will pull be-vendure image"
            fi

            echo "🔄 Pulling images for: $SERVICES_TO_PULL"
            docker-compose --env-file .env.production -f docker-compose.prod.yml pull $SERVICES_TO_PULL

            echo "✅ Images pulled successfully!"

            # Verify images were actually downloaded
            echo "📊 Checking downloaded images:"
            docker images | grep -E "(client-shell|be-vendure)" | head -10
          ENDSSH

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/lightsail_key



  cleanup-server-docker:
    needs: [load-detection-results, update-server-configuration, pull-latest-images]
    if: always() && needs.pull-latest-images.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/lightsail_key
          chmod 600 ~/.ssh/lightsail_key
          ssh-keyscan -H ${{ secrets.LIGHTSAIL_HOST }} >> ~/.ssh/known_hosts

      - name: Cleanup old Docker images on server
        run: |
          echo "🧹 Cleaning up Docker images on Lightsail server..."

          ssh -i ~/.ssh/lightsail_key \
            -o StrictHostKeyChecking=no \
            ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }} << 'ENDSSH'
            set -e
            cd ~/ewandr

            echo "📊 Docker disk usage before cleanup:"
            docker system df

            # Function to cleanup images, keeping only last 5
            cleanup_images() {
              local app_name=$1
              echo "Cleaning up images for $app_name..."

              # Get all images for app, sorted by creation date
              IMAGES=$(docker images --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}\t{{.ID}}" |
                       grep "$app_name" |
                       grep -v "<none>" |
                       sort -k2 -r)

              # Count images
              IMAGE_COUNT=$(echo "$IMAGES" | wc -l)
              echo "Found $IMAGE_COUNT images for $app_name"

              if [ $IMAGE_COUNT -gt 5 ]; then
                # Keep only last 5
                echo "$IMAGES" | tail -n +6 | awk '{print $3}' | while read IMAGE_ID; do
                  echo "Removing old image: $IMAGE_ID"
                  docker rmi -f $IMAGE_ID || true
                done
              fi
            }

            # Cleanup images for each service
            cleanup_images "client-shell"
            cleanup_images "be-vendure"

            # Remove unused images
            echo "🗑️ Removing dangling images..."
            docker image prune -f

            # Remove unused build cache
            echo "🗑️ Cleaning build cache..."
            docker builder prune -f --keep-storage=2GB

            echo "📊 Docker disk usage after cleanup:"
            docker system df

            # Check free space
            DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
            echo "💾 Disk usage: $DISK_USAGE%"

            if [ $DISK_USAGE -gt 80 ]; then
              echo "⚠️ WARNING: Disk usage is still high ($DISK_USAGE%)!"
              echo "Consider running more aggressive cleanup manually"
            fi
          ENDSSH

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/lightsail_key

  restart-lightsail-services:
    needs: [ load-detection-results, build-and-push-server, build-and-deploy-remotes, update-server-configuration, pull-latest-images, cleanup-server-docker ]
    if: |
      always() &&
      (needs.build-and-push-server.result == 'success' ||
       needs.build-and-push-server.result == 'skipped') &&
      (needs.build-and-deploy-remotes.result == 'success' ||
       needs.build-and-deploy-remotes.result == 'skipped') &&
      (needs.pull-latest-images.result == 'success' ||
       needs.pull-latest-images.result == 'skipped') &&
      (needs.load-detection-results.outputs.has-server-changes == 'true' ||
       needs.load-detection-results.outputs.affected-remotes != '[]')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ['client-shell', 'be-vendure']
    steps:
      - name: Check if app needs restart
        id: check-restart
        run: |
          NEEDS_RESTART="false"

          # be-vendure restarts only if it was changed AND deploy_server == true
          if [[ "${{ matrix.app }}" == "be-vendure" &&
                "${{ needs.load-detection-results.outputs.be_vendure_affected }}" == "true" &&
                "${{ github.event.inputs.deploy_server }}" == "true" ]]; then
            NEEDS_RESTART="true"
            echo "🔄 be-vendure was affected and server deployment enabled, needs restart"
          fi

          # client-shell restarts if:
          # 1. It was directly changed AND deploy_server == true
          # 2. Any remote apps were changed AND deploy_remotes == true
          if [[ "${{ matrix.app }}" == "client-shell" ]]; then
            if [[ "${{ needs.load-detection-results.outputs.client_shell_affected }}" == "true" &&
                  "${{ github.event.inputs.deploy_server }}" == "true" ]]; then
              NEEDS_RESTART="true"
              echo "🔄 client-shell was directly affected and server deployment enabled, needs restart"
            elif [[ "${{ needs.load-detection-results.outputs.affected-remotes }}" != "[]" &&
                    "${{ github.event.inputs.deploy_remotes }}" == "true" ]]; then
              NEEDS_RESTART="true"
              echo "🔄 Remote apps were updated and remote deployment enabled, client-shell (host) needs restart to pick up new remotes"
            fi
          fi

          echo "needs_restart=$NEEDS_RESTART" >> $GITHUB_OUTPUT
          echo "Decision for ${{ matrix.app }}: $NEEDS_RESTART"

      - name: Setup SSH key
        if: steps.check-restart.outputs.needs_restart == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/lightsail_key
          chmod 600 ~/.ssh/lightsail_key

          # Add host to known_hosts to avoid interactive prompt
          ssh-keyscan -H ${{ secrets.LIGHTSAIL_HOST }} >> ~/.ssh/known_hosts

      - name: Restart service with new image
        if: steps.check-restart.outputs.needs_restart == 'true'
        run: |
          echo "🔄 Restarting ${{ matrix.app }} on Lightsail..."

          # SSH connection and command execution
          ssh -i ~/.ssh/lightsail_key \
            -o StrictHostKeyChecking=no \
            ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }} << 'ENDSSH'
            set -e
            cd ~/ewandr

            echo "📋 Using .env.production:"
            cat .env.production | grep "_TAG="

            # IMPORTANT: Use --no-deps to avoid affecting dependent services
            echo "🛑 Stopping ${{ matrix.app }}..."
            docker-compose --env-file .env.production -f docker-compose.prod.yml stop ${{ matrix.app }}

            echo "🗑️ Removing old container..."
            docker-compose --env-file .env.production -f docker-compose.prod.yml rm -f ${{ matrix.app }}

            echo "🚀 Starting ${{ matrix.app }} with new image..."
            # Use --no-deps to start ONLY the specified service
            docker-compose --env-file .env.production -f docker-compose.prod.yml up -d --no-deps ${{ matrix.app }}

            echo "⏳ Waiting for container to be ready..."
            sleep 10

            echo "📊 Checking container status..."
            docker-compose --env-file .env.production -f docker-compose.prod.yml ps ${{ matrix.app }}

            # Verify container is running
            if docker-compose --env-file .env.production -f docker-compose.prod.yml ps ${{ matrix.app }} | grep -q "Up"; then
              echo "✅ ${{ matrix.app }} is running!"

              # Show which image is being used
              CONTAINER_ID=$(docker-compose --env-file .env.production -f docker-compose.prod.yml ps -q ${{ matrix.app }})
              echo "📦 Running image:"
              docker inspect --format='{{.Config.Image}}' "$CONTAINER_ID"

              # Check logs for startup errors
              echo "📜 Recent logs:"
              docker-compose --env-file .env.production -f docker-compose.prod.yml logs --tail=20 ${{ matrix.app }}
            else
              echo "❌ ${{ matrix.app }} is not running properly!"
              docker-compose --env-file .env.production -f docker-compose.prod.yml logs --tail=100 ${{ matrix.app }}
              exit 1
            fi
          ENDSSH
      - name: Health check
        if: steps.check-restart.outputs.needs_restart == 'true'
        run: |
          echo "⏳ Waiting for service to be fully ready..."
          sleep 30

          # Optional: check service health via HTTP
          if [[ "${{ matrix.app }}" == "client-shell" ]]; then
            if [[ -n "${{ secrets.PRODUCTION_DOMAIN }}" ]]; then
              echo "🔍 Checking client-shell health..."
              RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.PRODUCTION_DOMAIN }} || echo "000")
              if [[ "$RESPONSE" == "200" ]]; then
                echo "✅ client-shell is healthy (HTTP $RESPONSE)"
              else
                echo "⚠️ client-shell health check returned HTTP $RESPONSE"
              fi
            fi
          elif [[ "${{ matrix.app }}" == "be-vendure" ]]; then
            if [[ -n "${{ secrets.PRODUCTION_DOMAIN }}" ]]; then
              echo "🔍 Checking be-vendure health..."
              RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.PRODUCTION_DOMAIN }}/api/health || echo "000")
              if [[ "$RESPONSE" == "200" ]]; then
                echo "✅ be-vendure is healthy (HTTP $RESPONSE)"
              else
                echo "⚠️ be-vendure health check returned HTTP $RESPONSE"
              fi
            fi
          fi

          # Final check via SSH
          echo "🔍 Final container check..."
          ssh -i ~/.ssh/lightsail_key \
            -o StrictHostKeyChecking=no \
            ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }} \
            "cd ~/ewandr && docker-compose -f docker-compose.prod.yml ps ${{ matrix.app }}"

      - name: Cleanup SSH
        if: always() && steps.check-restart.outputs.needs_restart == 'true'
        run: |
          rm -f ~/.ssh/lightsail_key

  deployment-summary:
    needs: [ load-detection-results, build-and-deploy-remotes, build-and-push-server, restart-lightsail-services ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create deployment summary
        run: |
          echo "# 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**PR Number:** #${{ github.event.inputs.pr_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
          echo "**Commit SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Remote Applications Section
          if [[ "${{ github.event.inputs.deploy_remotes }}" == "true" ]]; then
            echo "## 📦 Remote Applications" >> $GITHUB_STEP_SUMMARY

            REMOTE_APPS='${{ needs.load-detection-results.outputs.affected-remotes }}'
            if [[ "$REMOTE_APPS" != "[]" && "$REMOTE_APPS" != "" ]]; then
              echo "**Status:** ${{ needs.build-and-deploy-remotes.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
              echo "**Updated Apps:**" >> $GITHUB_STEP_SUMMARY
              echo "$REMOTE_APPS" | jq -r '.[]' | while read app; do
                echo "- ✅ $app" >> $GITHUB_STEP_SUMMARY
              done
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "ℹ️ *Note: client-shell will be restarted to load updated remote applications*" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Status:** No remote applications to deploy" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Server Applications Section
          if [[ "${{ github.event.inputs.deploy_server }}" == "true" ]]; then
            echo "## 🖥️ Server Applications" >> $GITHUB_STEP_SUMMARY
            echo "**Build Status:** ${{ needs.build-and-push-server.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
            echo "**Restart Status:** ${{ needs.restart-lightsail-services.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Details for each server application
            if [[ "${{ needs.load-detection-results.outputs.client_shell_affected }}" == "true" ]]; then
              echo "### client-shell" >> $GITHUB_STEP_SUMMARY
              echo "- 🔄 Direct changes detected" >> $GITHUB_STEP_SUMMARY
              echo "- 🐳 Docker image updated" >> $GITHUB_STEP_SUMMARY
              echo "- ♻️ Service restarted" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.load-detection-results.outputs.affected-remotes }}" != "[]" ]]; then
              echo "### client-shell" >> $GITHUB_STEP_SUMMARY
              echo "- 🔗 Restarted due to remote apps updates" >> $GITHUB_STEP_SUMMARY
              echo "- ♻️ Service restarted to load new remotes" >> $GITHUB_STEP_SUMMARY
            fi

            if [[ "${{ needs.load-detection-results.outputs.be_vendure_affected }}" == "true" ]]; then
              echo "### be-vendure" >> $GITHUB_STEP_SUMMARY
              echo "- 🔄 Direct changes detected" >> $GITHUB_STEP_SUMMARY
              echo "- 🐳 Docker image updated" >> $GITHUB_STEP_SUMMARY
              echo "- ♻️ Service restarted" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Summary Statistics
          echo "## 📊 Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count updated applications
          TOTAL_APPS=0
          REMOTE_COUNT=0
          SERVER_COUNT=0

          REMOTE_APPS='${{ needs.load-detection-results.outputs.affected-remotes }}'
          if [[ "$REMOTE_APPS" != "[]" && "$REMOTE_APPS" != "" ]]; then
            REMOTE_COUNT=$(echo "$REMOTE_APPS" | jq 'length')
            TOTAL_APPS=$((TOTAL_APPS + REMOTE_COUNT))
          fi

          if [[ "${{ needs.load-detection-results.outputs.client_shell_affected }}" == "true" ]]; then
            SERVER_COUNT=$((SERVER_COUNT + 1))
            TOTAL_APPS=$((TOTAL_APPS + 1))
          fi

          if [[ "${{ needs.load-detection-results.outputs.be_vendure_affected }}" == "true" ]]; then
            SERVER_COUNT=$((SERVER_COUNT + 1))
            TOTAL_APPS=$((TOTAL_APPS + 1))
          fi

          echo "- **Total Applications Updated:** $TOTAL_APPS" >> $GITHUB_STEP_SUMMARY
          echo "- **Remote Applications:** $REMOTE_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Server Applications:** $SERVER_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Final Status
          echo "## 🎯 Final Status" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.build-and-deploy-remotes.result }}" == "success" || "${{ needs.build-and-deploy-remotes.result }}" == "skipped" ]] && \
             [[ "${{ needs.build-and-push-server.result }}" == "success" || "${{ needs.build-and-push-server.result }}" == "skipped" ]] && \
             [[ "${{ needs.restart-lightsail-services.result }}" == "success" || "${{ needs.restart-lightsail-services.result }}" == "skipped" ]]; then
            echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed or partially completed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi
