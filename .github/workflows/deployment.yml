# .github/workflows/manual-deployment.yml
name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to deploy (required)'
        required: true
        type: string
      deploy_remotes:
        description: 'Deploy remote applications'
        required: true
        default: true
        type: boolean
      deploy_server:
        description: 'Deploy server applications'
        required: true
        default: true
        type: boolean

permissions:
  contents: read
  actions: read
  pull-requests: read

env:
  NODE_VERSION: '20'
  NX_NO_CLOUD: true
  MF_MANIFEST_PATH: 'client-shell'
  MF_MANIFEST_FILE_NAME: 'mf-manifest.prod.json'
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY_PREFIX: ${{ secrets.ECR_REPOSITORY_PREFIX }}
  CDN_BUCKET: ${{ secrets.CDN_BUCKET }}
  CDN_DISTRIBUTION_ID: ${{ secrets.CDN_DISTRIBUTION_ID }}

jobs:
  load-detection-results:
    runs-on: ubuntu-latest
    outputs:
      affected-apps: ${{ steps.load.outputs.affected_apps }}
      has-server-changes: ${{ steps.load.outputs.has_server_changes }}
      affected-remotes: ${{ steps.load.outputs.affected_remotes }}
      client_shell_affected: ${{ steps.load.outputs.client_shell_affected }}
      be_core_service_affected: ${{ steps.load.outputs.be_core_service_affected }}
    steps:
      - name: Download artifact via API
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Searching for artifact from PR #${{ github.event.inputs.pr_number }}..."

          # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
          ARTIFACTS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/artifacts \
            --jq '.artifacts[] | select(.name == "detection-results-pr-${{ github.event.inputs.pr_number }}") | {id, name, expired, created_at}')

          if [ -z "$ARTIFACTS" ]; then
            echo "‚ùå No artifact found for PR #${{ github.event.inputs.pr_number }}"
            echo "Please ensure the PR detection workflow has completed successfully."
            exit 1
          fi

          echo "Found artifact:"
          echo "$ARTIFACTS"

          # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
          ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.id' | head -n1)

          # –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
          echo "Downloading artifact ID: $ARTIFACT_ID"
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip \
            > artifact.zip

          # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
          unzip artifact.zip
          ls -la

      - name: Load and display detection results
        id: load
        run: |
          if [ -f detection-results.json ]; then
            echo "üìã Deployment Summary for PR #${{ github.event.inputs.pr_number }}:"
            echo "================================"
            cat detection-results.json | jq -r '
              "PR Title: \(.pr_title)",
              "PR URL: \(.pr_url)",
              "Detection Time: \(.timestamp)",
              "",
              "Affected Applications:",
              (.affected_apps | map("  - " + .) | join("\n")),
              "",
              "Remote Applications: \(.affected_remotes | length)",
              "Server Changes: \(.has_server_changes)"
            '
            echo "================================"

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ outputs
            echo "affected_apps=$(jq -c '.affected_apps' detection-results.json)" >> $GITHUB_OUTPUT
            echo "affected_remotes=$(jq -c '.affected_remotes' detection-results.json)" >> $GITHUB_OUTPUT
            echo "has_server_changes=$(jq -r '.has_server_changes' detection-results.json)" >> $GITHUB_OUTPUT
            echo "client_shell_affected=$(jq -r '.client_shell_affected' detection-results.json)" >> $GITHUB_OUTPUT
            echo "be_core_service_affected=$(jq -r '.be_core_service_affected' detection-results.json)" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No detection results found in artifact!"
            exit 1
          fi

  build-and-deploy-remotes:
    needs: load-detection-results
    if: github.event.inputs.deploy_remotes == 'true' && needs.load-detection-results.outputs.affected-remotes != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.load-detection-results.outputs.affected-remotes) }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build in Docker
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            node:20-alpine \
            sh -c "npm ci --legacy-peer-deps && npx nx run ${{ matrix.app }}:server:production"

      - name: Generate version
        id: version
        run: |
          VERSION="${{ github.sha }}-$(date +%Y%m%d%H%M%S)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Upload to S3 CDN
        run: |
          APP_NAME="${{ matrix.app }}"
          VERSION="${{ steps.version.outputs.version }}"
          BUILD_PATH="dist/apps/clients/$APP_NAME"

          # Upload versioned build
          aws s3 sync $BUILD_PATH $CDN_BUCKET/$APP_NAME/$VERSION/ \
            --delete \
            --cache-control "public, max-age=31536000"

          # Upload as latest
          aws s3 sync $BUILD_PATH $CDN_BUCKET/$APP_NAME/latest/ \
            --delete \
            --cache-control "public, max-age=300"

      - name: Update manifest
        run: |
          APP_NAME="${{ matrix.app }}"
          VERSION="${{ steps.version.outputs.version }}"

          # Download current manifest
          aws s3 cp $CDN_BUCKET/$MF_MANIFEST_PATH/$MF_MANIFEST_FILE_NAME ./$MF_MANIFEST_FILE_NAME || echo '{}' > ./$MF_MANIFEST_FILE_NAME

          # Update manifest with new version
          jq --arg app "$APP_NAME" \
             --arg server "https://cdn.ewandr.com/$APP_NAME/$VERSION/server/remoteEntry.js" \
             --arg browser "https://cdn.ewandr.com/$APP_NAME/$VERSION/browser/mf-manifest.json" \
             '.[$app] = {server: $server, browser: $browser}' \
             ./$MF_MANIFEST_FILE_NAME > ./mf-manifest-updated.json

          # Upload updated manifest
          aws s3 cp ./mf-manifest-updated.json $CDN_BUCKET/$MF_MANIFEST_PATH/$MF_MANIFEST_FILE_NAME \
            --cache-control "public, max-age=60"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CDN_DISTRIBUTION_ID \
            --paths "/$MF_MANIFEST_PATH/$MF_MANIFEST_FILE_NAME" "/${{ matrix.app }}/latest/*"

  build-and-push-server:
    needs: load-detection-results
    if: github.event.inputs.deploy_server == 'true' && needs.load-detection-results.outputs.has-server-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ['client-shell', 'be-core-service']
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Check if app was affected
        id: check-affected
        run: |
          if echo '${{ needs.load-detection-results.outputs.affected-apps }}' | jq -r '.[]' | grep -q "^${{ matrix.app }}$"; then
            echo "affected=true" >> $GITHUB_OUTPUT
          else
            echo "affected=false" >> $GITHUB_OUTPUT
          fi

      - name: Build be-core-service application
        if: matrix.app == 'be-core-service' && needs.load-detection-results.outputs.be_core_service_affected == 'true'
        run: npx nx run be-core-service:build:production

      - name: Build client-shell application
        if: matrix.app == 'client-shell' && needs.load-detection-results.outputs.client_shell_affected == 'true'
        run: npx nx run client-shell:build:production --excludeTaskDependencies && npx nx run client-shell:server:production --excludeTaskDependencies

      - name: Configure AWS credentials
        if: steps.check-affected.outputs.affected == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: steps.check-affected.outputs.affected == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        if: steps.check-affected.outputs.affected == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}
          ECR_REPOSITORY_PREFIX: ${{ env.ECR_REPOSITORY_PREFIX }}
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
          SCRIPT_NAME="CI_CD/ecr-${{ matrix.app }}.sh"
          if [ -f "./$SCRIPT_NAME" ]; then
            echo "Running $SCRIPT_NAME"
            chmod +x ./$SCRIPT_NAME
            ./$SCRIPT_NAME
          else
            echo "Script $SCRIPT_NAME not found!"
            exit 1
          fi


  restart-lightsail-services:
    needs: [ build-and-push-server, build-and-deploy-remotes ]
    if: |
      always() &&
      github.event.inputs.deploy_server == 'true' &&
      (needs.load-detection-results.outputs.has-server-changes == 'true' ||
       needs.load-detection-results.outputs.affected-remotes != '[]')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [ 'client-shell', 'be-core-service' ]
    steps:
      - name: Check if app needs restart
        id: check-restart
        run: |
          NEEDS_RESTART="false"

          # be-core-service –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Å–∞–º –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
          if [[ "${{ matrix.app }}" == "be-core-service" && "${{ needs.load-detection-results.outputs.be_core_service_affected }}" == "true" ]]; then
            NEEDS_RESTART="true"
            echo "üîÑ be-core-service was affected, needs restart"
          fi

          # client-shell –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –µ—Å–ª–∏:
          # 1. –û–Ω —Å–∞–º –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
          # 2. –õ—é–±—ã–µ remote –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã (—Ç–∞–∫ –∫–∞–∫ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è host –¥–ª—è remotes)
          if [[ "${{ matrix.app }}" == "client-shell" ]]; then
            if [[ "${{ needs.load-detection-results.outputs.client_shell_affected }}" == "true" ]]; then
              NEEDS_RESTART="true"
              echo "üîÑ client-shell was directly affected, needs restart"
            elif [[ "${{ needs.load-detection-results.outputs.affected-remotes }}" != "[]" ]]; then
              NEEDS_RESTART="true"
              echo "üîÑ Remote apps were updated, client-shell (host) needs restart to pick up new remotes"
            fi
          fi

          echo "needs_restart=$NEEDS_RESTART" >> $GITHUB_OUTPUT
          echo "Decision for ${{ matrix.app }}: $NEEDS_RESTART"

      - name: Setup SSH key
        if: steps.check-restart.outputs.needs_restart == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/lightsail_key
          chmod 600 ~/.ssh/lightsail_key

          # –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç –≤ known_hosts —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
          ssh-keyscan -H ${{ secrets.LIGHTSAIL_HOST }} >> ~/.ssh/known_hosts

      - name: Pull latest images and restart service
        if: steps.check-restart.outputs.needs_restart == 'true'
        run: |
          echo "üîÑ Restarting ${{ matrix.app }} on Lightsail..."

          # –î–ª—è client-shell –≤—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ remote apps
          if [[ "${{ matrix.app }}" == "client-shell" && "${{ needs.load-detection-results.outputs.affected-remotes }}" != "[]" ]]; then
            echo "üì¶ Updated remote apps: ${{ needs.load-detection-results.outputs.affected-remotes }}"
          fi

          ssh -i ~/.ssh/lightsail_key \
            -o StrictHostKeyChecking=no \
            ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }} \
            "cd ewandr/ && \
             docker-compose -f docker-compose.prod.yml pull ${{ matrix.app }} && \
             docker-compose -f docker-compose.prod.yml restart ${{ matrix.app }} && \
             echo '‚úÖ Service ${{ matrix.app }} restarted successfully'"

      - name: Health check
        if: steps.check-restart.outputs.needs_restart == 'true'
        run: |
          echo "‚è≥ Waiting for service to be healthy..."
          sleep 30

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
          ssh -i ~/.ssh/lightsail_key \
            -o StrictHostKeyChecking=no \
            ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }} \
            "cd ewandr/ && docker-compose -f docker-compose.prod.yml ps ${{ matrix.app }}"

          # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ HTTP
          if [[ "${{ matrix.app }}" == "client-shell" ]]; then
            if [[ -n "${{ secrets.PRODUCTION_DOMAIN }}" ]]; then
              echo "üîç Checking client-shell health..."
              curl -f -s -o /dev/null -w "HTTP Status: %{http_code}\n" https://${{ secrets.PRODUCTION_DOMAIN }} || echo "‚ö†Ô∏è Health check failed (non-critical)"
            fi
          elif [[ "${{ matrix.app }}" == "be-core-service" ]]; then
            if [[ -n "${{ secrets.PRODUCTION_DOMAIN }}" ]]; then
              echo "üîç Checking be-core-service health..."
              curl -f -s -o /dev/null -w "HTTP Status: %{http_code}\n" https://${{ secrets.PRODUCTION_DOMAIN }}/api/health || echo "‚ö†Ô∏è Health check failed (non-critical)"
            fi
          fi

      - name: Cleanup SSH
        if: always() && steps.check-restart.outputs.needs_restart == 'true'
        run: |
          rm -f ~/.ssh/lightsail_key

  deployment-summary:
    needs: [ load-detection-results, build-and-deploy-remotes, build-and-push-server, restart-lightsail-services ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create deployment summary
        run: |
          echo "# üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**PR Number:** #${{ github.event.inputs.pr_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
          echo "**Commit SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Remote Applications Section
          if [[ "${{ github.event.inputs.deploy_remotes }}" == "true" ]]; then
            echo "## üì¶ Remote Applications" >> $GITHUB_STEP_SUMMARY

            REMOTE_APPS='${{ needs.load-detection-results.outputs.affected-remotes }}'
            if [[ "$REMOTE_APPS" != "[]" && "$REMOTE_APPS" != "" ]]; then
              echo "**Status:** ${{ needs.build-and-deploy-remotes.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
              echo "**Updated Apps:**" >> $GITHUB_STEP_SUMMARY
              echo "$REMOTE_APPS" | jq -r '.[]' | while read app; do
                echo "- ‚úÖ $app" >> $GITHUB_STEP_SUMMARY
              done
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚ÑπÔ∏è *Note: client-shell will be restarted to load updated remote applications*" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Status:** No remote applications to deploy" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Server Applications Section
          if [[ "${{ github.event.inputs.deploy_server }}" == "true" ]]; then
            echo "## üñ•Ô∏è Server Applications" >> $GITHUB_STEP_SUMMARY
            echo "**Build Status:** ${{ needs.build-and-push-server.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
            echo "**Restart Status:** ${{ needs.restart-lightsail-services.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
            if [[ "${{ needs.load-detection-results.outputs.client_shell_affected }}" == "true" ]]; then
              echo "### client-shell" >> $GITHUB_STEP_SUMMARY
              echo "- üîÑ Direct changes detected" >> $GITHUB_STEP_SUMMARY
              echo "- üê≥ Docker image updated" >> $GITHUB_STEP_SUMMARY
              echo "- ‚ôªÔ∏è Service restarted" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.load-detection-results.outputs.affected-remotes }}" != "[]" ]]; then
              echo "### client-shell" >> $GITHUB_STEP_SUMMARY
              echo "- üîó Restarted due to remote apps updates" >> $GITHUB_STEP_SUMMARY
              echo "- ‚ôªÔ∏è Service restarted to load new remotes" >> $GITHUB_STEP_SUMMARY
            fi

            if [[ "${{ needs.load-detection-results.outputs.be_core_service_affected }}" == "true" ]]; then
              echo "### be-core-service" >> $GITHUB_STEP_SUMMARY
              echo "- üîÑ Direct changes detected" >> $GITHUB_STEP_SUMMARY
              echo "- üê≥ Docker image updated" >> $GITHUB_STEP_SUMMARY
              echo "- ‚ôªÔ∏è Service restarted" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Summary Statistics
          echo "## üìä Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # –ü–æ–¥—Å—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
          TOTAL_APPS=0
          REMOTE_COUNT=0
          SERVER_COUNT=0

          REMOTE_APPS='${{ needs.load-detection-results.outputs.affected-remotes }}'
          if [[ "$REMOTE_APPS" != "[]" && "$REMOTE_APPS" != "" ]]; then
            REMOTE_COUNT=$(echo "$REMOTE_APPS" | jq 'length')
            TOTAL_APPS=$((TOTAL_APPS + REMOTE_COUNT))
          fi

          if [[ "${{ needs.load-detection-results.outputs.client_shell_affected }}" == "true" ]]; then
            SERVER_COUNT=$((SERVER_COUNT + 1))
            TOTAL_APPS=$((TOTAL_APPS + 1))
          fi

          if [[ "${{ needs.load-detection-results.outputs.be_core_service_affected }}" == "true" ]]; then
            SERVER_COUNT=$((SERVER_COUNT + 1))
            TOTAL_APPS=$((TOTAL_APPS + 1))
          fi

          echo "- **Total Applications Updated:** $TOTAL_APPS" >> $GITHUB_STEP_SUMMARY
          echo "- **Remote Applications:** $REMOTE_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Server Applications:** $SERVER_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Final Status
          echo "## üéØ Final Status" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.build-and-deploy-remotes.result }}" == "success" || "${{ needs.build-and-deploy-remotes.result }}" == "skipped" ]] && \
             [[ "${{ needs.build-and-push-server.result }}" == "success" || "${{ needs.build-and-push-server.result }}" == "skipped" ]] && \
             [[ "${{ needs.restart-lightsail-services.result }}" == "success" || "${{ needs.restart-lightsail-services.result }}" == "skipped" ]]; then
            echo "‚úÖ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Deployment failed or partially completed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi
